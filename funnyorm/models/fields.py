from typing import Any

from funnyorm.models.supported_databases import SUPPORTED_DATABASES


class Field:
    db_type = None
    auto = False

    def __init__(self, nullable=False, primary_key=False):
        self._db_value: Any = None
        self.nullable = nullable
        self.value: Any = None
        self.default: Any = None
        self.pk = primary_key

    def _update(self):
        raise NotImplementedError

    def _to_create_code():
        raise NotImplementedError

    def assert_database(self):
        try:
            assert self.db_type
            assert self.db_type in SUPPORTED_DATABASES
        except (AssertionError, TypeError):
            raise ValueError("Trying to create a model without a registered database")


class IntegerField(Field):
    def __init__(
        self,
        nullable: bool = False,
        default: None | int = None,
        auto: bool = False,
        primary_key: bool = False,
    ):
        self._db_value = None
        self.nullable = nullable
        self.value = default
        self.default = default
        self.auto = auto
        self.pk = primary_key

    def _update(self):
        self._db_value = self.value

    def _to_create_code(self):
        try:
            assert self.db_type
        except AssertionError:
            raise ValueError(
                "Trying to create a new IntegerField on a model without a registered database"
            )
        res = []
        if self.auto and self.db_type == SUPPORTED_DATABASES.POSTGRES:
            res.append("SERIAL")
        else:
            res.append("INTEGER")

        if self.default is not None:
            res.append(f"DEFAULT {self.default}")
        if self.nullable:
            res.append("NOT NULL")
        if self.auto and self.db_type != SUPPORTED_DATABASES.POSTGRES:
            res.append("GENERATED BY DEFAULT AS IDENTITY")
        if self.pk:
            res.append("PRIMARY KEY")

        return " ".join(res)


class CharField(Field):
    def __init__(
        self,
        max_length: int,
        nullable: bool = False,
        default: None | str = None,
        primary_key: bool = False,
    ):
        self._db_value = None
        self.nullable = nullable
        self.value = default
        self.default = default
        self.max_length = max_length
        self.pk = primary_key

    def _update(self):
        self._db_value = self.value

    def _to_create_code(self):
        self.assert_database()
        res = ["VARCHAR({})".format(self.max_length)]
        if self.default is not None:
            res.append(f"DEFAULT '{self.default}'")
        if self.nullable:
            res.append("NOT NULL")
        if self.pk:
            res.append("PRIMARY KEY")

        return " ".join(res)
